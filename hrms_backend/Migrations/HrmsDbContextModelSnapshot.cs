// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using hrms_backend.Models;

#nullable disable

namespace hrms_backend.Migrations
{
    [DbContext(typeof(HrmsDbContext))]
    partial class HrmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("hrms_backend.Models.ActivityLog", b =>
                {
                    b.Property<int>("LogId")
                        .HasColumnType("integer")
                        .HasColumnName("log_id");

                    b.Property<DateTime?>("ActivityDate")
                        .HasColumnType("datetime")
                        .HasColumnName("activity_date");

                    b.Property<string>("ActivityDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("activity_description");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_user_id");

                    b.HasKey("LogId")
                        .HasName("PK__Activity__9E2397E0FBE43A42");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("hrms_backend.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("permanent_address");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("postal_code");

                    b.Property<string>("PrimaryAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("primary_address");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("state_province");

                    b.HasKey("AddressId")
                        .HasName("PK__Address__CAA247C86F05D4A0");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("attendance_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttendanceId"));

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime")
                        .HasColumnName("datetime");

                    b.Property<int>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<int?>("FkOfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_office_id");

                    b.Property<bool?>("IsGeofence")
                        .HasColumnType("boolean")
                        .HasColumnName("is_geofence");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 7)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10, 7)")
                        .HasColumnName("longitude");

                    b.Property<int?>("ParentAttendanceId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_attendance_id");

                    b.Property<bool?>("Type")
                        .HasColumnType("boolean")
                        .HasColumnName("type");

                    b.HasKey("AttendanceId")
                        .HasName("PK__Attendan__20D6A9683231AAE7");

                    b.HasIndex("FkEmployeeId");

                    b.HasIndex("FkOfficeId");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.AttendanceSession", b =>
                {
                    b.Property<int>("AtttendnaceSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("atttendnace_session_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AtttendnaceSessionId"));

                    b.Property<decimal?>("ClockInLatitude")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("clock_in_latitude");

                    b.Property<decimal?>("ClockInLongitude")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("clock_in_longitude");

                    b.Property<bool?>("ClockOutGeofence")
                        .HasColumnType("boolean")
                        .HasColumnName("clockoutgeofence");

                    b.Property<decimal?>("ClockOutLatitude")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("clock_out_latitude");

                    b.Property<decimal?>("ClockOutLongitude")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("clock_out_longitude");

                    b.Property<DateTime?>("ClockinTime")
                        .HasColumnType("datetime")
                        .HasColumnName("clockin_time");

                    b.Property<bool?>("Clockingeofence")
                        .HasColumnType("boolean")
                        .HasColumnName("clockingeofence");

                    b.Property<DateTime?>("ClockoutTime")
                        .HasColumnType("datetime")
                        .HasColumnName("clockout_time");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<int?>("FkOfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_office_id");

                    b.Property<bool?>("Type")
                        .HasColumnType("boolean")
                        .HasColumnName("type");

                    b.HasKey("AtttendnaceSessionId")
                        .HasName("PK__Attendan__1DCC4B888F5F2789");

                    b.HasIndex("FkEmployeeId");

                    b.HasIndex("FkOfficeId");

                    b.ToTable("AttendanceSession", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.BankInformation", b =>
                {
                    b.Property<int>("BankInfoId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_info_id");

                    b.Property<string>("AccountName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("account_number");

                    b.Property<string>("BankName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bank_name");

                    b.Property<string>("Branch")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("branch");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<string>("Iban")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("iban");

                    b.Property<string>("IfscCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ifsc_code");

                    b.Property<string>("SwiftBic")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("swift_bic");

                    b.HasKey("BankInfoId")
                        .HasName("PK__BankInfo__DABDF864033B341F");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("BankInformation", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("candidate_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CandidateId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Cv")
                        .HasColumnType("bytea")
                        .HasColumnName("cv");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<int?>("FkJobId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_job_id");

                    b.Property<string>("Fullname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("fullname");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("join_date");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mobile_no");

                    b.Property<string>("ProfilePhoto")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("profile_photo");

                    b.Property<string>("Resume")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Skills")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.Property<string>("StagesName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("stages_name");

                    b.HasKey("CandidateId");

                    b.HasIndex("FkCompanyId");

                    b.HasIndex("FkJobId");

                    b.ToTable("Candidate", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.HasKey("Id")
                        .HasName("PK__cities__3213E83F98E1419B");

                    b.HasIndex("StateId");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("FkCandidateId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_candidate_id");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("interval");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFCAF71E5AC2");

                    b.HasIndex("FkCandidateId");

                    b.HasIndex("FkCompanyId");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("hrms_backend.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("CompanyGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("company_guid");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyWebsite")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("company_website");

                    b.Property<string>("ContactEmail")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<long?>("ContactNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("contact_number");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Domain")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("domain");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<int?>("FkContractTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_contract_type_id");

                    b.Property<int?>("FkIndustryId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_industry_id");

                    b.Property<int?>("FkPermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_permission_id");

                    b.Property<int?>("FkRemainderId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_remainder_id");

                    b.Property<int?>("FkSubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_subscription_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Language")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("image")
                        .HasColumnName("logo");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("size");

                    b.HasKey("CompanyId")
                        .HasName("PK__Company__3E2672351D3755F2");

                    b.HasIndex("FkContractTypeId");

                    b.HasIndex("FkIndustryId");

                    b.HasIndex("FkRemainderId");

                    b.HasIndex("FkSubscriptionId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.ContractType", b =>
                {
                    b.Property<int>("ContractTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_type_id");

                    b.Property<string>("ContractTypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contract_type_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.HasKey("ContractTypeId")
                        .HasName("PK__Contract__B66967DF66A70ACD");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("hrms_backend.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("Phonecode")
                        .HasColumnType("integer")
                        .HasColumnName("phonecode");

                    b.Property<string>("Shortname")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("shortname");

                    b.HasKey("Id")
                        .HasName("PK__countrie__3213E83F4465402F");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("department_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("FkDesignationId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_designation_id");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.HasKey("DepartmentId")
                        .HasName("PK__Departme__C22324221B0A5495");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .HasColumnType("integer")
                        .HasColumnName("designation_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DesignationName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("designation_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.HasKey("DesignationId")
                        .HasName("PK__Designat__177649C1BE733CB2");

                    b.ToTable("Designation", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("DocumentName")
                        .HasColumnType("text")
                        .HasColumnName("document_name");

                    b.Property<string>("DocumentType")
                        .HasColumnType("text")
                        .HasColumnName("document_type");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("UploadedBy")
                        .HasColumnType("text")
                        .HasColumnName("uploaded_by");

                    b.Property<DateTime?>("UploadedDate")
                        .HasColumnType("date")
                        .HasColumnName("uploaded_date");

                    b.HasKey("DocumentId")
                        .HasName("PK__Document__9666E8AC1802A28D");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.EditOt", b =>
                {
                    b.Property<int>("EditotId")
                        .HasColumnType("integer")
                        .HasColumnName("editot_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeSpan?>("EditedOtHours")
                        .HasColumnType("interval")
                        .HasColumnName("edited_ot_hours");

                    b.Property<TimeSpan?>("OriginalOtHours")
                        .HasColumnType("interval")
                        .HasColumnName("original_ot_hours");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reason");

                    b.HasKey("EditotId")
                        .HasName("PK__EditOT__234852D538753D43");

                    b.ToTable("EditOT", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.EditPaidTime", b =>
                {
                    b.Property<int>("EditId")
                        .HasColumnType("integer")
                        .HasColumnName("edit_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeSpan?>("EditedPaidTime")
                        .HasColumnType("interval")
                        .HasColumnName("edited_paid_time");

                    b.Property<TimeSpan?>("OriginalPaidTime")
                        .HasColumnType("interval")
                        .HasColumnName("original_paid_time");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reason");

                    b.HasKey("EditId")
                        .HasName("PK__EditPaid__A8C1B4CC3C18EEAA");

                    b.ToTable("EditPaidTime", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.EmailTemplate", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateId"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("EmailTemplate1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("EmailTemplate");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Stage")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("TemplateId")
                        .HasName("PK__EmailTem__F87ADD27755A01C1");

                    b.ToTable("EmailTemplate", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.EmergencyContact", b =>
                {
                    b.Property<int>("EmergencyContactId")
                        .HasColumnType("integer")
                        .HasColumnName("emergency_contact_id");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Relationship")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("relationship");

                    b.HasKey("EmergencyContactId")
                        .HasName("PK__Emergenc__3B08826D8C394B6E");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("EmergencyContact", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("ActivationToken")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("activation_token");

                    b.Property<string>("AlternateMobileNo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alternate_mobile_no");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrentSessionId")
                        .HasColumnType("integer")
                        .HasColumnName("current_session_id");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("current_state");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<byte[]>("FeaturedImage")
                        .HasColumnType("image")
                        .HasColumnName("featured_image");

                    b.Property<byte[]>("Fimage")
                        .IsUnicode(false)
                        .HasColumnType("bytea");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<int?>("FkDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_department_id");

                    b.Property<int?>("FkDesignationId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_designation_id");

                    b.Property<int?>("FkEmployeeGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_group_id");

                    b.Property<int?>("FkEmployementTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employement_type_id");

                    b.Property<int?>("FkEmpstatusId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_empstatus_id");

                    b.Property<string>("FkLoginHistoryId")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("fk_login_history_id")
                        .IsFixedLength();

                    b.Property<int?>("FkOfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_office_id");

                    b.Property<int?>("FkScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_schedule_id");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_user_id");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gender");

                    b.Property<string>("HealthInsurance")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("health_insurance");

                    b.Property<int?>("Ids")
                        .HasColumnType("integer")
                        .HasColumnName("IDS");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IsPasswordGenerated")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("join_date");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<int?>("LineManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("line_manager_id");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("marital_status");

                    b.Property<string>("MarriageAnniversary")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("marriage_anniversary");

                    b.Property<int?>("MobileNo")
                        .HasColumnType("integer")
                        .HasColumnName("mobile_no");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("Nationality")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nationality");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<int?>("PersonalTaxId")
                        .HasColumnType("integer")
                        .HasColumnName("personal_tax_id");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ResetToken")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("ServiceYear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("service_year");

                    b.Property<string>("SocialInsurance")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("social_insurance");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenantId");

                    b.Property<int?>("fk_role_id")
                        .HasColumnType("integer")
                        .HasColumnName("fk_role_id");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__C52E0BA8B53E3551");

                    b.HasIndex("FkCompanyId");

                    b.HasIndex("FkDepartmentId");

                    b.HasIndex("FkDesignationId");

                    b.HasIndex("FkEmployeeGroupId");

                    b.HasIndex("FkEmployementTypeId");

                    b.HasIndex("FkEmpstatusId");

                    b.HasIndex("FkOfficeId");

                    b.HasIndex("FkScheduleId");

                    b.HasIndex("fk_role_id");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.EmployeeDocument", b =>
                {
                    b.Property<int?>("EmployeeDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_document_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("EmployeeDocumentId"));

                    b.Property<int?>("FkDocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_document_id");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("EmployeeDocumentId");

                    b.HasIndex("FkDocumentId");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("EmployeeDocuments");
                });

            modelBuilder.Entity("hrms_backend.Models.EmployeeGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("GroupName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("group_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.HasKey("GroupId")
                        .HasName("PK__Employee__D57795A05F39F93C");

                    b.ToTable("EmployeeGroups");
                });

            modelBuilder.Entity("hrms_backend.Models.EmployeeStatus", b =>
                {
                    b.Property<int>("EmpStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("emp_status_id");

                    b.Property<string>("StatusName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status_name");

                    b.HasKey("EmpStatusId")
                        .HasName("PK__Employee__8F2E59B90D6860EA");

                    b.ToTable("EmployeeStatus", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.EmployementType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<string>("CreatedBy")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("TypeName")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.HasKey("EmployeeTypeId")
                        .HasName("PK__Employem__A36C7A1C6017A549");

                    b.ToTable("EmployementType", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Holiday", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("holiday_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HolidayId"));

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<string>("HolidayName")
                        .HasColumnType("text")
                        .HasColumnName("holiday_name");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("HolidayId")
                        .HasName("PK__Holidays__253884EA34BADC18");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("hrms_backend.Models.Industry", b =>
                {
                    b.Property<int>("IndustryId")
                        .HasColumnType("integer")
                        .HasColumnName("industry_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IndustryName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("industry_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.HasKey("IndustryId")
                        .HasName("PK__Industry__A9676AC8181C3389");

                    b.ToTable("Industry", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobId"));

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("date")
                        .HasColumnName("closing_date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department_name");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmployeementType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("employeement_type");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("JobTittle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Job_tittle");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("OfficeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("office_name");

                    b.Property<DateTime?>("ProbationEndDate")
                        .HasColumnType("date")
                        .HasColumnName("probation_end_date");

                    b.Property<DateTime?>("ProbationStartDate")
                        .HasColumnType("date")
                        .HasColumnName("probation_start_date");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("JobId")
                        .HasName("PK__Jobs__6E32B6A50FD982C0");

                    b.HasIndex("FkCompanyId");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("hrms_backend.Models.JobHistory", b =>
                {
                    b.Property<int>("JobhistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("jobhistory_id");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("employment_type");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<int?>("FkJobId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_job_id");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("job_title");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<string>("Office")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("office");

                    b.Property<string>("PositionType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("position_type");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("JobhistoryId")
                        .HasName("PK__JobHisto__3A6F953611205635");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("JobHistory", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Leaf", b =>
                {
                    b.Property<int>("LeaveId")
                        .HasColumnType("integer")
                        .HasColumnName("leave_id");

                    b.Property<TimeSpan?>("ActualTotalLeaves")
                        .HasColumnType("interval")
                        .HasColumnName("actual_total_leaves");

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("attachment");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<int?>("FkLeaveTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_leave_type_id");

                    b.Property<int?>("FkScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_schedule_id");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.Property<int?>("total_days")
                        .HasColumnType("integer");

                    b.HasKey("LeaveId")
                        .HasName("PK__Leaves__743350BC7E1164A6");

                    b.HasIndex("FkEmployeeId");

                    b.HasIndex("FkLeaveTypeId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("hrms_backend.Models.LeaveType", b =>
                {
                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("leave_type_id");

                    b.Property<int?>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Duration")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<string>("EligibleEmployeeType")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("eligible_employee_type");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsCarryForward")
                        .HasColumnType("boolean")
                        .HasColumnName("is_carry_forward");

                    b.Property<bool?>("IsPaid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("boolean")
                        .HasColumnName("ispaid");

                    b.Property<int?>("Limit")
                        .HasColumnType("integer")
                        .HasColumnName("limit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("SpecificEmployees")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("specific_employees");

                    b.HasKey("LeaveTypeId")
                        .HasName("PK__leave_ty__727714D4AB5334C5");

                    b.HasIndex("FkCompanyId");

                    b.ToTable("leave_type", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.LoginHistory", b =>
                {
                    b.Property<int>("LoginId")
                        .HasColumnType("integer")
                        .HasColumnName("login_id");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("login_date");

                    b.Property<string>("LoginStatus")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("login_status");

                    b.Property<DateTime?>("LogoutDate")
                        .HasColumnType("datetime")
                        .HasColumnName("logout_date");

                    b.HasKey("LoginId")
                        .HasName("PK__LoginHis__C2C971DBF8021BA2");

                    b.ToTable("LoginHistory", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.MissingClockInOut", b =>
                {
                    b.Property<int>("MissingclockinoutId")
                        .HasColumnType("integer")
                        .HasColumnName("missingclockinout_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeSpan?>("MissingClockInTime")
                        .HasColumnType("interval")
                        .HasColumnName("missing_clock_in_time");

                    b.Property<TimeSpan?>("MissingClockOutTime")
                        .HasColumnType("interval")
                        .HasColumnName("missing_clock_out_time");

                    b.HasKey("MissingclockinoutId")
                        .HasName("PK__MissingC__190B2EC9CAB71D29");

                    b.ToTable("MissingClockInOut", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("module_name");

                    b.HasKey("ModuleId")
                        .HasName("PK__Modules__2B7477870CE44DE4");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("hrms_backend.Models.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("NationalityID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NationalityId"));

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.HasKey("NationalityId")
                        .HasName("PK__National__F628E7A403D6D417");

                    b.ToTable("Nationality", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("news_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NewsId"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<int?>("FkEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_employee_id");

                    b.Property<string>("Imageurl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("imageurl");

                    b.Property<DateTime?>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("published_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("NewsId")
                        .HasName("PK__News__954EBDD3319FC91F");

                    b.HasIndex("FkCompanyId");

                    b.HasIndex("FkEmployeeId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("hrms_backend.Models.OffLocation", b =>
                {
                    b.Property<int>("OfficeLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("office_location_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OfficeLocationId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Fkcompanyid")
                        .HasColumnType("integer")
                        .HasColumnName("fkcompanyid");

                    b.Property<string>("Geofencing")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("geofencing");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Latitude1")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude1");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<double?>("Longitude1")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude1");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("OfficeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("office_name");

                    b.Property<byte[]>("Qrcode")
                        .HasColumnType("bytea")
                        .HasColumnName("qrcode");

                    b.Property<string>("Qrcodeimage")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("qrcodeimage");

                    b.HasKey("OfficeLocationId")
                        .HasName("PK__OffLocat__C864FABF64C20A3C");

                    b.HasIndex("Fkcompanyid");

                    b.ToTable("OffLocation", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("office_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OfficeId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<long?>("ContactNo")
                        .HasColumnType("bigint")
                        .HasColumnName("contact_no");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("country");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("email")
                        .IsFixedLength();

                    b.Property<int?>("FkCityId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_city_id");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<int?>("FkCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_country_id");

                    b.Property<string>("FkOfficelocationId")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .HasColumnName("fk_officelocation_id")
                        .IsFixedLength();

                    b.Property<int?>("FkScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_schedule_id");

                    b.Property<int?>("FkStateId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_state_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("OfficeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("office_name");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Qrcode")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("qrcode");

                    b.Property<double?>("Radius")
                        .HasColumnType("double precision")
                        .HasColumnName("radius");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("state");

                    b.HasKey("OfficeId")
                        .HasName("PK__Offices__2A196375281F3BCD");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("hrms_backend.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("permission_name");

                    b.HasKey("PermissionId")
                        .HasName("PK__Permissi__E5331AFA2BDDFE49");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("hrms_backend.Models.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .HasColumnType("integer")
                        .HasColumnName("reminder_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("date")
                        .HasColumnName("reminder_date");

                    b.Property<string>("ReminderDetails")
                        .HasColumnType("text")
                        .HasColumnName("reminder_details");

                    b.Property<string>("ReminderName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reminder_name");

                    b.Property<TimeSpan?>("ReminderTime")
                        .HasColumnType("interval")
                        .HasColumnName("reminder_time");

                    b.HasKey("ReminderId")
                        .HasName("PK__Reminder__E27A3628D21485A2");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("hrms_backend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__760965CCEB4BCDAD");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.RoleModulePermissionMapping", b =>
                {
                    b.Property<int>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mapping_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MappingId"));

                    b.Property<int?>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<int?>("PermissionFlag")
                        .HasColumnType("integer")
                        .HasColumnName("permission_flag");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("MappingId")
                        .HasName("PK__RoleModu__8B5781BD10CE3CB3");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleModulePermissionMapping", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("section_name");

                    b.HasKey("SectionId")
                        .HasName("PK__Sections__80EF0872C779387A");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("hrms_backend.Models.SectionPermission", b =>
                {
                    b.Property<int>("SectionPermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_permission_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<int>("PermissionFlag")
                        .HasColumnType("integer")
                        .HasColumnName("permission_flag");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.HasKey("SectionPermissionId")
                        .HasName("PK__SectionP__9A304360DECD7AB9");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionPermissions");
                });

            modelBuilder.Entity("hrms_backend.Models.Stage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StageId"));

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("StageId")
                        .HasName("PK__Stages__03EB7AD812D4BA1A");

                    b.HasIndex("FkCompanyId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("hrms_backend.Models.Statess", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("country_id")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__statess__3213E83FE3DCA3CF");

                    b.HasIndex("CountryId");

                    b.ToTable("statess", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("SubscriptionName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subscription_name");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Subscrip__863A7EC12643307C");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.UserDevice", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("device_name");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("device_token");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("device_type");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_user_id");

                    b.HasKey("DeviceId")
                        .HasName("PK__UserDevi__3B085D8BCAC5EBDF");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("hrms_backend.Models.Workschedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduleId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("DailyWorkingHours")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("daily_working_hours");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<int?>("FkCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_company_id");

                    b.Property<TimeSpan?>("HalfDayTime")
                        .HasColumnType("interval")
                        .HasColumnName("half_day_time");

                    b.Property<TimeSpan?>("HoursPerDay")
                        .HasColumnType("interval")
                        .HasColumnName("hours_per_day");

                    b.Property<string>("HoursPerWeek")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("hours_per_week");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<TimeSpan?>("LateTime")
                        .HasColumnType("interval")
                        .HasColumnName("late_time");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("ScheduleName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("schedule_name");

                    b.Property<string>("ScheduleType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("schedule_type");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.Property<string>("WorkingDays")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("working_days");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Worksche__C46A8A6F0390EBCB");

                    b.HasIndex("FkCompanyId");

                    b.ToTable("Workschedule", (string)null);
                });

            modelBuilder.Entity("hrms_backend.Models.Address", b =>
                {
                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("Addresses")
                        .HasForeignKey("FkEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Address_Employee");

                    b.Navigation("FkEmployee");
                });

            modelBuilder.Entity("hrms_backend.Models.Attendance", b =>
                {
                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("Attendances")
                        .HasForeignKey("FkEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_Attendance_Employee");

                    b.HasOne("hrms_backend.Models.Office", "FkOffice")
                        .WithMany("Attendances")
                        .HasForeignKey("FkOfficeId")
                        .HasConstraintName("FK_Attendance_Offices");

                    b.Navigation("FkEmployee");

                    b.Navigation("FkOffice");
                });

            modelBuilder.Entity("hrms_backend.Models.AttendanceSession", b =>
                {
                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("AttendanceSessions")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("fk_attendance_session_employee");

                    b.HasOne("hrms_backend.Models.Office", "FkOffice")
                        .WithMany("AttendanceSessions")
                        .HasForeignKey("FkOfficeId")
                        .HasConstraintName("FK_AttendanceSession_Offices");

                    b.Navigation("FkEmployee");

                    b.Navigation("FkOffice");
                });

            modelBuilder.Entity("hrms_backend.Models.BankInformation", b =>
                {
                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("BankInformations")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_BankInformation_Employee");

                    b.Navigation("FkEmployee");
                });

            modelBuilder.Entity("hrms_backend.Models.Candidate", b =>
                {
                    b.HasOne("hrms_backend.Models.Company", "FkCompany")
                        .WithMany("Candidates")
                        .HasForeignKey("FkCompanyId")
                        .HasConstraintName("FK_Candidate_Company");

                    b.HasOne("hrms_backend.Models.Job", "FkJob")
                        .WithMany("Candidates")
                        .HasForeignKey("FkJobId")
                        .HasConstraintName("FK_Candidate_Candidate");

                    b.Navigation("FkCompany");

                    b.Navigation("FkJob");
                });

            modelBuilder.Entity("hrms_backend.Models.City", b =>
                {
                    b.HasOne("hrms_backend.Models.Statess", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_cities_statess");

                    b.Navigation("State");
                });

            modelBuilder.Entity("hrms_backend.Models.Comment", b =>
                {
                    b.HasOne("hrms_backend.Models.Candidate", "FkCandidate")
                        .WithMany("Comments")
                        .HasForeignKey("FkCandidateId")
                        .HasConstraintName("FK_Comments_Candidate");

                    b.HasOne("hrms_backend.Models.Company", "FkCompany")
                        .WithMany("Comments")
                        .HasForeignKey("FkCompanyId")
                        .HasConstraintName("FK_Comments_Company");

                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("Comments")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_Comments_Employee");

                    b.Navigation("FkCandidate");

                    b.Navigation("FkCompany");

                    b.Navigation("FkEmployee");
                });

            modelBuilder.Entity("hrms_backend.Models.Company", b =>
                {
                    b.HasOne("hrms_backend.Models.ContractType", "FkContractType")
                        .WithMany("Companies")
                        .HasForeignKey("FkContractTypeId")
                        .HasConstraintName("FK_Company_ContractTypes");

                    b.HasOne("hrms_backend.Models.Industry", "FkIndustry")
                        .WithMany("Companies")
                        .HasForeignKey("FkIndustryId")
                        .HasConstraintName("FK_Company_Industry");

                    b.HasOne("hrms_backend.Models.Reminder", "FkRemainder")
                        .WithMany("Companies")
                        .HasForeignKey("FkRemainderId")
                        .HasConstraintName("FK_Company_Reminders");

                    b.HasOne("hrms_backend.Models.Subscription", "FkSubscription")
                        .WithMany("Companies")
                        .HasForeignKey("FkSubscriptionId")
                        .HasConstraintName("FK_Company_Subscription");

                    b.Navigation("FkContractType");

                    b.Navigation("FkIndustry");

                    b.Navigation("FkRemainder");

                    b.Navigation("FkSubscription");
                });

            modelBuilder.Entity("hrms_backend.Models.Document", b =>
                {
                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("Documents")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_Document_Employee");

                    b.Navigation("FkEmployee");
                });

            modelBuilder.Entity("hrms_backend.Models.EmergencyContact", b =>
                {
                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_EmergencyContact_Employee");

                    b.Navigation("FkEmployee");
                });

            modelBuilder.Entity("hrms_backend.Models.Employee", b =>
                {
                    b.HasOne("hrms_backend.Models.Company", "FkCompany")
                        .WithMany("Employees")
                        .HasForeignKey("FkCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Employee__fk_com__787EE5A0");

                    b.HasOne("hrms_backend.Models.Department", "FkDepartment")
                        .WithMany("Employees")
                        .HasForeignKey("FkDepartmentId")
                        .HasConstraintName("FK__Employee__fk_dep__75A278F5");

                    b.HasOne("hrms_backend.Models.Designation", "FkDesignation")
                        .WithMany("Employees")
                        .HasForeignKey("FkDesignationId")
                        .HasConstraintName("FK_Employee_Employee");

                    b.HasOne("hrms_backend.Models.EmployeeGroup", "FkEmployeeGroup")
                        .WithMany("Employees")
                        .HasForeignKey("FkEmployeeGroupId")
                        .HasConstraintName("FK_Employee_EmployeeGroups");

                    b.HasOne("hrms_backend.Models.EmployementType", "FkEmployementType")
                        .WithMany("Employees")
                        .HasForeignKey("FkEmployementTypeId")
                        .HasConstraintName("FK_Employee_EmployementType");

                    b.HasOne("hrms_backend.Models.EmployeeStatus", "FkEmpstatus")
                        .WithMany("Employees")
                        .HasForeignKey("FkEmpstatusId")
                        .HasConstraintName("FK__Employee__fk_emp__7A672E12");

                    b.HasOne("hrms_backend.Models.Office", "FkOffice")
                        .WithMany("Employees")
                        .HasForeignKey("FkOfficeId")
                        .HasConstraintName("FK_Employee_Offices");

                    b.HasOne("hrms_backend.Models.Workschedule", "FkSchedule")
                        .WithMany()
                        .HasForeignKey("FkScheduleId")
                        .HasConstraintName("FK_Employee_Workschedule");

                    b.HasOne("hrms_backend.Models.Role", "FkRole")
                        .WithMany("Employees")
                        .HasForeignKey("fk_role_id")
                        .HasConstraintName("FK_Employee_Role");

                    b.Navigation("FkCompany");

                    b.Navigation("FkDepartment");

                    b.Navigation("FkDesignation");

                    b.Navigation("FkEmployeeGroup");

                    b.Navigation("FkEmployementType");

                    b.Navigation("FkEmpstatus");

                    b.Navigation("FkOffice");

                    b.Navigation("FkRole");

                    b.Navigation("FkSchedule");
                });

            modelBuilder.Entity("hrms_backend.Models.EmployeeDocument", b =>
                {
                    b.HasOne("hrms_backend.Models.Document", "FkDocument")
                        .WithMany()
                        .HasForeignKey("FkDocumentId")
                        .HasConstraintName("FK_EmployeeDocuments_Document");

                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany()
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_EmployeeDocuments_Employee");

                    b.Navigation("FkDocument");

                    b.Navigation("FkEmployee");
                });

            modelBuilder.Entity("hrms_backend.Models.Job", b =>
                {
                    b.HasOne("hrms_backend.Models.Company", "FkCompany")
                        .WithMany("Jobs")
                        .HasForeignKey("FkCompanyId")
                        .HasConstraintName("FK_Jobs_Company");

                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("Jobs")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_Jobs_Employee");

                    b.Navigation("FkCompany");

                    b.Navigation("FkEmployee");
                });

            modelBuilder.Entity("hrms_backend.Models.JobHistory", b =>
                {
                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("JobHistories")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_JobHistory_JobHistory");

                    b.Navigation("FkEmployee");
                });

            modelBuilder.Entity("hrms_backend.Models.Leaf", b =>
                {
                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("Leaves")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK__Leaves__fk_emplo__1B9317B3");

                    b.HasOne("hrms_backend.Models.LeaveType", "FkLeaveType")
                        .WithMany("Leaves")
                        .HasForeignKey("FkLeaveTypeId")
                        .HasConstraintName("FK__Leaves__fk_leave__1D7B6025");

                    b.Navigation("FkEmployee");

                    b.Navigation("FkLeaveType");
                });

            modelBuilder.Entity("hrms_backend.Models.LeaveType", b =>
                {
                    b.HasOne("hrms_backend.Models.Company", "FkCompany")
                        .WithMany("LeaveTypes")
                        .HasForeignKey("FkCompanyId")
                        .HasConstraintName("FK_leave_type_Company");

                    b.Navigation("FkCompany");
                });

            modelBuilder.Entity("hrms_backend.Models.News", b =>
                {
                    b.HasOne("hrms_backend.Models.Company", "FkCompany")
                        .WithMany("News")
                        .HasForeignKey("FkCompanyId")
                        .HasConstraintName("FK_News_Company");

                    b.HasOne("hrms_backend.Models.Employee", "FkEmployee")
                        .WithMany("News")
                        .HasForeignKey("FkEmployeeId")
                        .HasConstraintName("FK_News_Employee");

                    b.Navigation("FkCompany");

                    b.Navigation("FkEmployee");
                });

            modelBuilder.Entity("hrms_backend.Models.OffLocation", b =>
                {
                    b.HasOne("hrms_backend.Models.Company", "Fkcompany")
                        .WithMany("OffLocations")
                        .HasForeignKey("Fkcompanyid")
                        .HasConstraintName("FK_OffLocation_Company");

                    b.Navigation("Fkcompany");
                });

            modelBuilder.Entity("hrms_backend.Models.RoleModulePermissionMapping", b =>
                {
                    b.HasOne("hrms_backend.Models.Module", "Module")
                        .WithMany("RoleModulePermissionMappings")
                        .HasForeignKey("ModuleId");

                    b.HasOne("hrms_backend.Models.Role", "Role")
                        .WithMany("RoleModulePermissionMappings")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__RoleModul__RoleI__6F4A8121");

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("hrms_backend.Models.SectionPermission", b =>
                {
                    b.HasOne("hrms_backend.Models.Company", "Company")
                        .WithMany("SectionPermissions")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_SectionPermissions_Company");

                    b.HasOne("hrms_backend.Models.Role", "Role")
                        .WithMany("SectionPermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__SectionPe__RoleI__038683F8");

                    b.HasOne("hrms_backend.Models.Section", "Section")
                        .WithMany("SectionPermissions")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK__SectionPe__Secti__047AA831");

                    b.Navigation("Company");

                    b.Navigation("Role");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("hrms_backend.Models.Stage", b =>
                {
                    b.HasOne("hrms_backend.Models.Company", "FkCompany")
                        .WithMany("Stages")
                        .HasForeignKey("FkCompanyId")
                        .HasConstraintName("FK_Stages_Company");

                    b.Navigation("FkCompany");
                });

            modelBuilder.Entity("hrms_backend.Models.Statess", b =>
                {
                    b.HasOne("hrms_backend.Models.Country", "Country")
                        .WithMany("Statesses")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_statess_countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("hrms_backend.Models.Workschedule", b =>
                {
                    b.HasOne("hrms_backend.Models.Company", "FkCompany")
                        .WithMany("Workschedules")
                        .HasForeignKey("FkCompanyId")
                        .HasConstraintName("FK_Workschedule_Company");

                    b.Navigation("FkCompany");
                });

            modelBuilder.Entity("hrms_backend.Models.Candidate", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("hrms_backend.Models.Company", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Comments");

                    b.Navigation("Employees");

                    b.Navigation("Jobs");

                    b.Navigation("LeaveTypes");

                    b.Navigation("News");

                    b.Navigation("OffLocations");

                    b.Navigation("SectionPermissions");

                    b.Navigation("Stages");

                    b.Navigation("Workschedules");
                });

            modelBuilder.Entity("hrms_backend.Models.ContractType", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("hrms_backend.Models.Country", b =>
                {
                    b.Navigation("Statesses");
                });

            modelBuilder.Entity("hrms_backend.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("hrms_backend.Models.Designation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("hrms_backend.Models.Employee", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AttendanceSessions");

                    b.Navigation("Attendances");

                    b.Navigation("BankInformations");

                    b.Navigation("Comments");

                    b.Navigation("Documents");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("JobHistories");

                    b.Navigation("Jobs");

                    b.Navigation("Leaves");

                    b.Navigation("News");
                });

            modelBuilder.Entity("hrms_backend.Models.EmployeeGroup", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("hrms_backend.Models.EmployeeStatus", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("hrms_backend.Models.EmployementType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("hrms_backend.Models.Industry", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("hrms_backend.Models.Job", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("hrms_backend.Models.LeaveType", b =>
                {
                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("hrms_backend.Models.Module", b =>
                {
                    b.Navigation("RoleModulePermissionMappings");
                });

            modelBuilder.Entity("hrms_backend.Models.Office", b =>
                {
                    b.Navigation("AttendanceSessions");

                    b.Navigation("Attendances");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("hrms_backend.Models.Reminder", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("hrms_backend.Models.Role", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("RoleModulePermissionMappings");

                    b.Navigation("SectionPermissions");
                });

            modelBuilder.Entity("hrms_backend.Models.Section", b =>
                {
                    b.Navigation("SectionPermissions");
                });

            modelBuilder.Entity("hrms_backend.Models.Statess", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("hrms_backend.Models.Subscription", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
